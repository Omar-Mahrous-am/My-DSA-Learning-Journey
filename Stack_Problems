#Stack_Problems

#1.Valid Parentheses
class Solution:
    def isValid(self, s: str) -> bool:
        if len(s)%2!=0:
            return False

        mapping={  ')' : '('  ,  '}' : '{'  ,  ']' : '['}
        stack=[]

        for bracket in s:
            #checking_for_mapping_keys"closed bracket"
            if bracket in mapping:  
                if stack and stack[-1]==mapping[bracket]:
                    stack.pop()
                else:
                    #if it begins with closed bracket
                    return False 
            
            #if it begins with open bracket
            else:
                stack.append(bracket)
        #False if it is not empty       
        return not stack



#2.MIN_STACK 

class MinStack:

    def __init__(self):
        self.stack=[]
        self.minstack=[]
        

    def push(self, val: int) -> None:
        self.stack.append(val)
        minn=min(val,self.minstack[-1] if self.minstack else val)
        self.minstack.append(minn)

        

    def pop(self) -> None:
        self.stack.pop()
        self.minstack.pop()
        

    def top(self) -> int:
        return self.stack[-1]
        

    def getMin(self) -> int:
        return self.minstack[-1]
        





                 
        
        
